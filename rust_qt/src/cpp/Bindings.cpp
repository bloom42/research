/* generated by rust_qt_binding_generator */
#include "Bindings.h"

namespace {

    struct option_quintptr {
    public:
        quintptr value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_quintptr>::value, "option_quintptr must be a POD type.");

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }

    struct qmodelindex_t {
        int row;
        quintptr id;
    };
    inline QVariant cleanNullQVariant(const QVariant& v) {
        return (v.isNull()) ?QVariant() :v;
    }
    inline void grepBusyChanged(Grep* o)
    {
        Q_EMIT o->busyChanged();
    }
    inline void grepQueryChanged(Grep* o)
    {
        Q_EMIT o->queryChanged();
    }
}
extern "C" {
    void grep_data_line(const Grep::Private*, int, QString*, qstring_set);
    void grep_data_name(const Grep::Private*, int, QString*, qstring_set);
    void grep_data_path(const Grep::Private*, int, QString*, qstring_set);
    void grep_sort(Grep::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int grep_row_count(const Grep::Private*);
    bool grep_insert_rows(Grep::Private*, int, int);
    bool grep_remove_rows(Grep::Private*, int, int);
    bool grep_can_fetch_more(const Grep::Private*);
    void grep_fetch_more(Grep::Private*);
}
int Grep::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Grep::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Grep::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : grep_row_count(m_d);
}

bool Grep::insertRows(int row, int count, const QModelIndex &)
{
    return grep_insert_rows(m_d, row, count);
}

bool Grep::removeRows(int row, int count, const QModelIndex &)
{
    return grep_remove_rows(m_d, row, count);
}

QModelIndex Grep::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Grep::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Grep::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : grep_can_fetch_more(m_d);
}

void Grep::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        grep_fetch_more(m_d);
    }
}
void Grep::updatePersistentIndexes() {}

void Grep::sort(int column, Qt::SortOrder order)
{
    grep_sort(m_d, column, order);
}
Qt::ItemFlags Grep::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    return flags;
}

QString Grep::line(int row) const
{
    QString s;
    grep_data_line(m_d, row, &s, set_qstring);
    return s;
}

QString Grep::name(int row) const
{
    QString s;
    grep_data_name(m_d, row, &s, set_qstring);
    return s;
}

QString Grep::path(int row) const
{
    QString s;
    grep_data_path(m_d, row, &s, set_qstring);
    return s;
}

QVariant Grep::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(line(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(name(index.row()));
        case Qt::UserRole + 2:
            return QVariant::fromValue(path(index.row()));
        }
        break;
    }
    return QVariant();
}

int Grep::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Grep::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "line");
    names.insert(Qt::UserRole + 1, "name");
    names.insert(Qt::UserRole + 2, "path");
    return names;
}
QVariant Grep::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Grep::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

extern "C" {
    Grep::Private* grep_new(Grep*, void (*)(Grep*), void (*)(Grep*),
        void (*)(const Grep*),
        void (*)(Grep*),
        void (*)(Grep*),
        void (*)(Grep*, quintptr, quintptr),
        void (*)(Grep*),
        void (*)(Grep*),
        void (*)(Grep*, int, int),
        void (*)(Grep*),
        void (*)(Grep*, int, int, int),
        void (*)(Grep*),
        void (*)(Grep*, int, int),
        void (*)(Grep*));
    void grep_free(Grep::Private*);
    bool grep_busy_get(const Grep::Private*);
    void grep_query_get(const Grep::Private*, QString*, qstring_set);
    void grep_query_set(Grep::Private*, const ushort *str, int len);
};

Grep::Grep(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Grep::Grep(QObject *parent):
    QAbstractItemModel(parent),
    m_d(grep_new(this,
        grepBusyChanged,
        grepQueryChanged,
        [](const Grep* o) {
            Q_EMIT o->newDataReady(QModelIndex());
        },
        [](Grep* o) {
            Q_EMIT o->layoutAboutToBeChanged();
        },
        [](Grep* o) {
            o->updatePersistentIndexes();
            Q_EMIT o->layoutChanged();
        },
        [](Grep* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Grep* o) {
            o->beginResetModel();
        },
        [](Grep* o) {
            o->endResetModel();
        },
        [](Grep* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Grep* o) {
            o->endInsertRows();
        },
        [](Grep* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](Grep* o) {
            o->endMoveRows();
        },
        [](Grep* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Grep* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Grep::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Grep::~Grep() {
    if (m_ownsPrivate) {
        grep_free(m_d);
    }
}
void Grep::initHeaderData() {
}
bool Grep::busy() const
{
    return grep_busy_get(m_d);
}
QString Grep::query() const
{
    QString v;
    grep_query_get(m_d, &v, set_qstring);
    return v;
}
void Grep::setQuery(const QString& v) {
    grep_query_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
}
